"""
Minimum Swaps 2
Given an array of integers A of size N that is a permutation of [0, 1, 2, ..., (N-1)]. It is allowed to swap any two elements (not necessarily consequtive). Find the minimum number of swaps required to sort the array in ascending order. 
Input Format
The only argument given is the integer array A.
Output Format
Return the minimum number of swaps.
Constraints
1 <= N <= 100000
0 <= A[i] < N
For Example
Input 1:
    A = [1, 2, 3, 4, 0]
Output 1:
    4

Input 2:
    A = [2, 0, 1, 3]
Output 2:
    2
   """
   class Sol:
    
    def solve(self, arr):
        ans = 0
        visited = [-1]*len(arr)
        for i in range(len(arr)):
            if visited[i] == 1 or arr[i] == i-1:
                continue
            else:
                j = i 
                count = 0
                while(visited[j] != 1):
                    visited[j]  = 1
                    j = arr[j]-1
                    count += 1
                ans += (count-1)
        return ans
    
solution = Sol()
print(solution.solve([1, 20, 6, 4, 5 ]))
